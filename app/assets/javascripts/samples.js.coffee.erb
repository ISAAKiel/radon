jQuery ->
  $('#sample_culture_id').parent().show()
  $('.javascript_content').show()

  if !($('#sample_phase_id option:selected').val())
    $('#sample_phase_id').parent().hide()

  states = $('#sample_phase_id').html()
  $('#sample_culture_id').change ->
    culture = $('#sample_culture_id :selected').text()
    escaped_culture = culture.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1')
    options = $(states).filter("optgroup[label='#{escaped_culture}']").html()
    if options
      $('#sample_phase_id').html(options)
      $('#sample_phase_id').parent().show()
    else
      $('#sample_phase_id').empty()
      $('#sample_phase_id').parent().hide()

#  $(".siteFeature").click ->
#    $('#hidden_site_id').val(this.getAttribute ('data_site_id'))
##    $('#sample_site_id').val(this.getAttribute ("data_site_id"))
#    $('#hidden_site_id').prop('disabled', false);
#    console.log $('#hidden_site_id') 
#    false

  $("#search").keydown= (event) ->
    if(event.keyCode == 13 && jQuery.support.submitBubbles)
      $(this).parents("form").append('&commit=Search').submit();

  $("[data-function='use_last_site']").click (e) ->
    console.log this
    $('#hidden_site_id').val(this.getAttribute ('data_site_id'))
    $('#site_display_name').text(this.getAttribute ('data_site_name'))
    $("[data-input='site_name']").val(this.getAttribute ('data_site_name'))
    false

  $(document).on 'click', 'form .remove_fields', (event) ->
    $(this).prev('input[type=hidden]').val('1')
    $(this).closest('fieldset').hide()
    event.preventDefault()

  getQueryParam = (param) ->
    regex = new RegExp("[?&]#{encodeURIComponent(param)}=([^&]*)")
    match = regex.exec(location.search)
    if match?
      decodeURIComponent(match[1])
    else
      null

  if $('.samples.index').length > 0

    # set map center
    recreate_bbox = ->
      bbox_array = getQueryParam("bbox").split(",")
      bounds = [
        [bbox_array[0], bbox_array[1]]
        [bbox_array[2], bbox_array[3]]
      ]
      L.rectangle(bounds, {color: '#000000'}).addTo(drawnItems)
      map.addLayer drawnItems
      map.fitBounds(bounds)

    # create map
    map = L.map('map', {maxZoom: 20}).setView([
        54.339161
        10.123868
      ], 5)
    data = $('#map').data('sites');
    i = 0

    marker_clusters = L.markerClusterGroup()

    points = data.map((p) ->
      L.marker([
        p['lat']
        p['lng']
      ]).addTo marker_clusters
      [
        p['lat']
        p['lng']
      ]
      p
    )

    heat = L.heatLayer(points, {minOpacity: 0.25, gradient: {0.25: "rgb(254,232,200)", 0.5: "rgb(253,187,132)", 0.75: 'rgb(227,74,51)'}})

    arrange_layers = ->
      if map.getZoom() > 8 and map.hasLayer(heat)
        map.removeLayer heat
        map.addLayer marker_clusters
      if map.getZoom() <= 8 and map.hasLayer(heat) == false
        map.addLayer heat
        map.removeLayer marker_clusters
      return

    googleLayer = new L.Google('HYBRID')
    map.addLayer(googleLayer, maxZoom: 18)

    # add drawing layer
    drawnItems = new (L.FeatureGroup)

    arrange_layers()

    recreate_bbox() if /bbox/.test(window.location.href)

    # add drawing controls
    drawControl = new (L.Control.Draw)(
      draw:
        polyline: false
        polygon: false 
        rectangle: true
        marker: false
        circle: false
      edit:
        featureGroup: drawnItems)
    map.addControl drawControl

    # change colour of drawn rectangles
    drawControl.setDrawingOptions rectangle: shapeOptions: color: '#000000'

    # react to user starting to draw
    map.on 'draw:drawstart', (e) ->
      if map.hasLayer drawnItems
        drawnItems.eachLayer (layer) ->
          do drawnItems.removeLayer layer
        return
      map.addLayer drawnItems
      return

    # react to user drawing
    map.on 'draw:created', (e) ->
      layer = e.layer
      coturl(layer)
      drawnItems.addLayer layer
      return

    # react to editing
    map.on 'draw:edited', (e) ->
      layers = e.layers
      layers.eachLayer (layer) ->
        coturl(layer)
        return
      return

    # coordinates to url method
    coturl = (layer) ->
      ll = layer.getBounds()
      north = ll.getNorth()
      east = ll.getEast()
      west = ll.getWest()
      south = ll.getSouth()
      coordtext = "?" + "bbox=" + north + "," + east + "," + south + "," + west
      stateObj = foo: 'bar'
      history.pushState stateObj, 'page 2', coordtext
      window.location = coordtext
      return

    map.on 'zoomend', ->
      arrange_layers()
      return

    selectList = L.DomUtil.get('toggleMap')

    @_resetZoom = (event) ->
      zoom = @getZoom()
      @setZoom zoom
      return

    L.DomEvent.addListener selectList, 'click', @_resetZoom, map

  if $('.samples.show').length > 0

    data = $('#map').data('sites');

    # create map
    map = L.map('map', {maxZoom: 20}).setView([
        data['lat']
        data['lng']
      ], 15)

    googleLayer = new L.Google('HYBRID')
    map.addLayer(googleLayer, maxZoom: 18)

    L.marker([
      data['lat']
      data['lng']
    ]).addTo map

